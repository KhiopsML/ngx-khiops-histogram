import { Injectable } from '@angular/core';
import { HistogramBarVO } from '../model/ngx-khiops-histogram.bar-vo';
import { HistogramType } from '../model/ngx-khiops-histogram.types';
import * as i0 from "@angular/core";
export class HistogramService {
    constructor() {
        this.rangeXLin = {};
        this.rangeYLin = 0;
        this.rangeYLog = {
            min: 0,
            max: 0,
        };
        this.rangeXLog = {};
    }
    getRangeX(datas) {
        this.rangeXLog.inf = datas.find(function (d) {
            return d.partition[0] === 0 || d.partition[1] === 0;
        });
        this.rangeXLog.min = datas[0].partition[0];
        this.rangeXLog.negValuesCount = datas.filter(function (d) {
            return d.partition[1] < 0;
        })?.length;
        this.rangeXLog.posValuesCount = datas.filter(function (d) {
            return d.partition[1] > 0;
        })?.length;
        if (this.rangeXLog.inf) {
            // 0 exist
            this.rangeXLog.negStart =
                // @ts-ignore update it with es2023
                datas.findLast(function (d) {
                    return d.partition[0] < 0 && d.partition[1] <= 0;
                })?.partition[0] || undefined;
            this.rangeXLog.posStart =
                datas.find(function (d) {
                    return d.partition[0] > 0 && d.partition[1] > 0;
                })?.partition[0] || undefined;
        }
        else {
            this.rangeXLog.negStart =
                // @ts-ignore update it with es2023
                datas.findLast(function (d) {
                    return d.partition[0] < 0 && d.partition[1] <= 0;
                })?.partition[1] || undefined;
            this.rangeXLog.posStart =
                datas.find(function (d) {
                    return d.partition[0] > 0 && d.partition[1] > 0;
                })?.partition[0] || undefined;
        }
        this.rangeXLog.max = datas[datas.length - 1].partition[1];
        this.rangeXLog.middlewidth = 1.2;
        this.rangeXLin.min = datas[0].partition[0];
        this.rangeXLin.max = datas[datas.length - 1].partition[1];
        return [this.rangeXLin, this.rangeXLog];
    }
    getLinRangeY(datas) {
        const dataValues = datas.map((d) => d.value);
        this.rangeYLin = Math.max(...dataValues);
        return this.rangeYLin;
    }
    getLogRangeY(datas) {
        const dataValues = datas.map((e) => e.logValue).filter((e) => e !== 0);
        this.rangeYLog.max = Math.max(...dataValues);
        this.rangeYLog.min = Math.min(...dataValues);
        return this.rangeYLog;
    }
    getLinRatioY(h, padding = 0) {
        let ratioY = (h - padding / 2) / this.rangeYLin;
        return ratioY;
    }
    getLogRatioY(h, padding = 0) {
        let ratioY;
        // @ts-ignore
        let shift = Math.abs(this.rangeYLog.min) - Math.abs(this.rangeYLog.max);
        ratioY = (h - padding / 2) / shift;
        return ratioY;
    }
    computeXbarsDimensions(datas, xType) {
        let bars = [];
        datas.forEach((d, i) => {
            let histogramBar = new HistogramBarVO(d, 
            // @ts-ignore
            this.rangeXLog.middlewidth, xType);
            if (xType === HistogramType.XLIN) {
                histogramBar.computeXLin(bars);
            }
            else {
                histogramBar.computeXLog(bars);
            }
            bars.push(histogramBar);
        });
        return bars;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: HistogramService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: HistogramService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: HistogramService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,