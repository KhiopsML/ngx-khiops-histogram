import { Injectable } from '@angular/core';
// import { TranslateService } from '@ngstack/translate';
import * as d3 from 'd3';
import * as i0 from "@angular/core";
export class HistogramUIService {
    static { this.chartColors = ['#6e93d5', '#ffbe46']; }
    // static translate: TranslateService;
    static setTranslationService() {
        // translate: TranslateService
        // this.translate = translate;
    }
    static getColor(i) {
        return this.chartColors[i];
    }
    static getColors() {
        return this.chartColors;
    }
    // @ts-ignore
    static getCurrentBarPosition(datas, canvasPosition, event, yPadding = 0) {
        if (datas) {
            let x = event.pageX - canvasPosition.left;
            let y = event.pageY - canvasPosition.top;
            for (let i = 0; i < datas.length; i++) {
                if (
                // @ts-ignore
                y > datas?.[i].coords?.y &&
                    // @ts-ignore
                    y < datas?.[i].coords?.y + datas?.[i].coords?.barH + yPadding / 2 &&
                    // @ts-ignore
                    x > datas?.[i].coords?.x &&
                    // @ts-ignore
                    x < datas?.[i].coords?.x + datas?.[i].coords?.barW) {
                    return i;
                }
            }
        }
        return undefined;
    }
    static generateTooltip(datasLabels, d, isFirstInterval) {
        let bounds = '';
        if (isFirstInterval) {
            bounds += '[';
        }
        else {
            bounds += ']';
        }
        bounds += d.partition[0] + ', ' + d.partition[1] + ']';
        return (
        // this.translate.get('GLOBAL.DENSITY') +
        datasLabels.value +
            ': ' +
            d3.format('.2e')(d.value) +
            '<br>' +
            // this.translate.get('GLOBAL.FREQUENCY') +
            datasLabels.frequency +
            ': ' +
            d.frequency +
            '<br>' +
            // this.translate.get('GLOBAL.INTERVAL') +
            datasLabels.partition +
            ': ' +
            bounds);
    }
    static initCanvasContext(canvas, w, h) {
        const ctx = canvas?.getContext('2d');
        if (ctx && canvas) {
            ctx.imageSmoothingEnabled = true;
            canvas.width = w;
            canvas.height = h;
        }
        return ctx;
    }
    /**
     * Before draw canvas, clean dom
     */
    static cleanDomContext(ctx, canvas) {
        if (canvas) {
            // @ts-ignore
            ctx = canvas.getContext('2d');
            // @ts-ignore
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
    }
    static hexToRgba(hex, alpha) {
        if (!/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
            throw new Error('Invalid Hex format');
        }
        let c;
        if (hex.length === 4) {
            c = '#' + [hex[1], hex[1], hex[2], hex[2], hex[3], hex[3]].join('');
        }
        else {
            c = hex;
        }
        const r = parseInt(c.slice(1, 3), 16);
        const g = parseInt(c.slice(3, 5), 16);
        const b = parseInt(c.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: HistogramUIService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: HistogramUIService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: HistogramUIService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,