import { HistogramType } from './ngx-khiops-histogram.types';
import { HistogramUIService } from '../services/ngx-khiops-histogram.ui.service';
export class HistogramBarVO {
    constructor(d, middlewidth, xType) {
        this.barWlog = 0;
        this.barXlog = 0;
        this.barWlin = 0;
        this.barXlin = 0;
        this.color = HistogramUIService.getColor(1);
        this.partition = [];
        //@ts-ignore
        this.partition = d.partition;
        if (xType === HistogramType.XLIN) {
            let barWlin = 0;
            if (this.partition[0] < 0 && this.partition[1] > 0) {
                barWlin = Math.abs(this.partition[0]) + Math.abs(this.partition[1]);
            }
            else {
                barWlin = Math.abs(this.partition[0]) - Math.abs(this.partition[1]);
            }
            this.barWlin = Math.abs(barWlin);
        }
        else {
            let barWlog = 0;
            if (d.partition[0] === 0 || d.partition[1] === 0) {
                barWlog = Math.log10(middlewidth);
                this.color = HistogramUIService.getColor(0);
            }
            else {
                barWlog =
                    Math.log10(Math.abs(this.partition[0])) -
                        Math.log10(Math.abs(this.partition[1]));
                if (this.partition[0] < 0 && this.partition[1] > 0) {
                    barWlog = Math.log10(middlewidth) * 2;
                    this.color = HistogramUIService.getColor(0);
                }
            }
            this.barWlog = Math.abs(barWlog);
        }
    }
    computeXLog(bars) {
        let sum = bars.reduce((partialSum, a) => Math.abs(partialSum) + Math.abs(a.barWlog), 0);
        this.barXlog = sum || 0;
    }
    computeXLin(bars) {
        let sum = bars.reduce((partialSum, a) => Math.abs(partialSum) + Math.abs(a.barWlin), 0);
        this.barXlin = sum || 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWtoaW9wcy1oaXN0b2dyYW0uYmFyLXZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWtoaW9wcy1oaXN0b2dyYW0vc3JjL2xpYi9tb2RlbC9uZ3gta2hpb3BzLWhpc3RvZ3JhbS5iYXItdm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzdELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRWpGLE1BQU0sT0FBTyxjQUFjO0lBUXpCLFlBQVksQ0FBbUIsRUFBRSxXQUFtQixFQUFFLEtBQWE7UUFQbkUsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUNwQixZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBQ3BCLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFDcEIsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUNwQixVQUFLLEdBQVcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFHYixZQUFZO1FBQ1osSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQzdCLElBQUksS0FBSyxLQUFLLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNuRCxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEUsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RSxDQUFDO1lBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLENBQUM7YUFBTSxDQUFDO1lBQ04sSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDakQsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPO29CQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFMUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUNuRCxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxDQUFDO1lBQ0gsQ0FBQztZQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFzQjtRQUNoQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUNuQixDQUFDLFVBQWtCLEVBQUUsQ0FBaUIsRUFBRSxFQUFFLENBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQzVDLENBQUMsQ0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBc0I7UUFDaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FDbkIsQ0FBQyxVQUFrQixFQUFFLENBQWlCLEVBQUUsRUFBRSxDQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUM1QyxDQUFDLENBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaXN0b2dyYW1WYWx1ZXNJIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9uZ3gta2hpb3BzLWhpc3RvZ3JhbS5pbnRlcmZhY2VzJztcbmltcG9ydCB7IEhpc3RvZ3JhbVR5cGUgfSBmcm9tICcuL25neC1raGlvcHMtaGlzdG9ncmFtLnR5cGVzJztcbmltcG9ydCB7IEhpc3RvZ3JhbVVJU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL25neC1raGlvcHMtaGlzdG9ncmFtLnVpLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgSGlzdG9ncmFtQmFyVk8ge1xuICBiYXJXbG9nOiBudW1iZXIgPSAwO1xuICBiYXJYbG9nOiBudW1iZXIgPSAwO1xuICBiYXJXbGluOiBudW1iZXIgPSAwO1xuICBiYXJYbGluOiBudW1iZXIgPSAwO1xuICBjb2xvcjogc3RyaW5nID0gSGlzdG9ncmFtVUlTZXJ2aWNlLmdldENvbG9yKDEpO1xuICBwYXJ0aXRpb24gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkOiBIaXN0b2dyYW1WYWx1ZXNJLCBtaWRkbGV3aWR0aDogbnVtYmVyLCB4VHlwZTogc3RyaW5nKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdGhpcy5wYXJ0aXRpb24gPSBkLnBhcnRpdGlvbjtcbiAgICBpZiAoeFR5cGUgPT09IEhpc3RvZ3JhbVR5cGUuWExJTikge1xuICAgICAgbGV0IGJhcldsaW4gPSAwO1xuICAgICAgaWYgKHRoaXMucGFydGl0aW9uWzBdIDwgMCAmJiB0aGlzLnBhcnRpdGlvblsxXSA+IDApIHtcbiAgICAgICAgYmFyV2xpbiA9IE1hdGguYWJzKHRoaXMucGFydGl0aW9uWzBdKSArIE1hdGguYWJzKHRoaXMucGFydGl0aW9uWzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhcldsaW4gPSBNYXRoLmFicyh0aGlzLnBhcnRpdGlvblswXSkgLSBNYXRoLmFicyh0aGlzLnBhcnRpdGlvblsxXSk7XG4gICAgICB9XG4gICAgICB0aGlzLmJhcldsaW4gPSBNYXRoLmFicyhiYXJXbGluKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJhcldsb2cgPSAwO1xuICAgICAgaWYgKGQucGFydGl0aW9uWzBdID09PSAwIHx8IGQucGFydGl0aW9uWzFdID09PSAwKSB7XG4gICAgICAgIGJhcldsb2cgPSBNYXRoLmxvZzEwKG1pZGRsZXdpZHRoKTtcbiAgICAgICAgdGhpcy5jb2xvciA9IEhpc3RvZ3JhbVVJU2VydmljZS5nZXRDb2xvcigwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhcldsb2cgPVxuICAgICAgICAgIE1hdGgubG9nMTAoTWF0aC5hYnModGhpcy5wYXJ0aXRpb25bMF0pKSAtXG4gICAgICAgICAgTWF0aC5sb2cxMChNYXRoLmFicyh0aGlzLnBhcnRpdGlvblsxXSkpO1xuXG4gICAgICAgIGlmICh0aGlzLnBhcnRpdGlvblswXSA8IDAgJiYgdGhpcy5wYXJ0aXRpb25bMV0gPiAwKSB7XG4gICAgICAgICAgYmFyV2xvZyA9IE1hdGgubG9nMTAobWlkZGxld2lkdGgpICogMjtcbiAgICAgICAgICB0aGlzLmNvbG9yID0gSGlzdG9ncmFtVUlTZXJ2aWNlLmdldENvbG9yKDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmJhcldsb2cgPSBNYXRoLmFicyhiYXJXbG9nKTtcbiAgICB9XG4gIH1cblxuICBjb21wdXRlWExvZyhiYXJzOiBIaXN0b2dyYW1CYXJWT1tdKSB7XG4gICAgbGV0IHN1bSA9IGJhcnMucmVkdWNlKFxuICAgICAgKHBhcnRpYWxTdW06IG51bWJlciwgYTogSGlzdG9ncmFtQmFyVk8pID0+XG4gICAgICAgIE1hdGguYWJzKHBhcnRpYWxTdW0pICsgTWF0aC5hYnMoYS5iYXJXbG9nKSxcbiAgICAgIDBcbiAgICApO1xuICAgIHRoaXMuYmFyWGxvZyA9IHN1bSB8fCAwO1xuICB9XG5cbiAgY29tcHV0ZVhMaW4oYmFyczogSGlzdG9ncmFtQmFyVk9bXSkge1xuICAgIGxldCBzdW0gPSBiYXJzLnJlZHVjZShcbiAgICAgIChwYXJ0aWFsU3VtOiBudW1iZXIsIGE6IEhpc3RvZ3JhbUJhclZPKSA9PlxuICAgICAgICBNYXRoLmFicyhwYXJ0aWFsU3VtKSArIE1hdGguYWJzKGEuYmFyV2xpbiksXG4gICAgICAwXG4gICAgKTtcbiAgICB0aGlzLmJhclhsaW4gPSBzdW0gfHwgMDtcbiAgfVxufVxuIl19