import { ElementRef, EventEmitter, Renderer2, SimpleChanges } from '@angular/core';
import { ResizedEvent } from 'angular-resize-event';
import { HistogramBarVO } from '../../model/ngx-khiops-histogram.bar-vo';
import * as d3 from 'd3';
import { HistogramValuesI, RangeXLogI, RangeXLinI, RangeYLogI, HistogramOptions } from '../../interfaces/ngx-khiops-histogram.interfaces';
import { HistogramService } from '../../services/ngx-khiops-histogram.service';
import { HistogramType } from '../../model/ngx-khiops-histogram.types';
import * as i0 from "@angular/core";
export declare class NgxKhiopsHistogramComponent {
    private histogramService;
    private el;
    private renderer;
    chart: ElementRef;
    componentType: string;
    svg: d3.Selection<SVGElement, unknown, HTMLElement, any> | undefined;
    private resizeSubject;
    selectedItemChanged: EventEmitter<any>;
    datas: HistogramValuesI[] | undefined;
    datasLabels: any;
    selectedItem: number;
    graphOptionX: HistogramType | undefined;
    graphOptionY: HistogramType | undefined;
    options: HistogramOptions;
    h: number;
    w: number;
    bars: HistogramBarVO[];
    xTickCount: number;
    yTicksCount: number;
    tickSize: number;
    rangeXLog: RangeXLogI | undefined;
    rangeXLin: RangeXLinI | undefined;
    rangeYLin: number | undefined;
    rangeYLog: RangeYLogI | undefined;
    ratioY: number;
    ratio: number;
    isLoading: boolean;
    colorSet: string[];
    ctx: CanvasRenderingContext2D | null | undefined;
    ctxSelected: CanvasRenderingContext2D | null | undefined;
    ctxHover: CanvasRenderingContext2D | null | undefined;
    histogramCanvas: HTMLCanvasElement | null | undefined;
    histogramHoverCanvas: HTMLCanvasElement | null | undefined;
    histogramSelectedCanvas: HTMLCanvasElement | null | undefined;
    tooltipText: string;
    tooltipPosX: number;
    tooltipPosY: number;
    tooltipDisplay: boolean;
    constructor(histogramService: HistogramService, el: ElementRef, renderer: Renderer2);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    changeGraphTypeX(type: HistogramType): void;
    changeGraphTypeY(type: HistogramType): void;
    onResized(event: ResizedEvent): void;
    handleResized(event: ResizedEvent): void;
    ngOnChanges(changes: SimpleChanges): void;
    handleCanvasClick(event: any): void;
    drawSelectedItem(): void;
    handleCanvasOut(): void;
    handleCanvasMove(event: any): void;
    showTooltip(event: MouseEvent, text: string): void;
    hideTooltip(): void;
    init(): void;
    drawChart(chartW: number): void;
    drawRect(ctx: CanvasRenderingContext2D, d: HistogramValuesI, bar: HistogramBarVO, ratio?: number, selectedItem?: boolean): void;
    drawHistogram(datasSet: HistogramValuesI[]): void;
    drawXAxis(domain: number[], shift: number, width: number): void;
    drawYAxis(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxKhiopsHistogramComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxKhiopsHistogramComponent, "ngx-khiops-histogram", never, { "datas": { "alias": "datas"; "required": false; }; "datasLabels": { "alias": "datasLabels"; "required": false; }; "selectedItem": { "alias": "selectedItem"; "required": false; }; "graphOptionX": { "alias": "graphOptionX"; "required": false; }; "graphOptionY": { "alias": "graphOptionY"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, { "selectedItemChanged": "selectedItemChanged"; }, never, never, false, never>;
}
